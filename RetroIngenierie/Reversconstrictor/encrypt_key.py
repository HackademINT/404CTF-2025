def encrypt_key(key):
    for _ in range(100):
        key <<= 1
        key ^= 0x
        key >>= 1
        key &= 0xF327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_3271_ADF3_3271_ADF3_F327_1ADF_3271_ADF3_F327_1ADF_1ADF_F327_1ADF_1ADF_ADF3_F327_1ADF_1ADF_F327_1ADF_1ADF_ADF3_F327
        key -= 0x4351_EAC5_DB5A_0D3F_3151_3511_EAC5_DB5A_0D3F_3521_EAC5_DB5A_0D3F_3151_EAC5_DB5A_0D3F_2143_EAC5_DB5A_EAC5_DB5A_0D3F_3151_EAC5_DB5A_0D3F_3151_4351_EAC5_DB5A_0D3F_3151_3511_EAC5_DB5A_0D3F_3521_EAC5_DB5A_0D3F_3151_EAC5_DB5A_0D3F_2143_EAC5_DB5A_EAC5_DB5A_0D3F_3151_EAC5_DB5A_0D3F_3151_4351_EAC5_DB5A_0D3F_3151_3511_EAC5_DB5A_0D3F_3521_EAC5_DB5A_0D3F_3151_EAC5_DB5A_0D3F_2143_EAC5_DB5A_EAC5_DB5A_0D3F_3151_EAC5_DB5A_0D3F_3151_4351_EAC5_DB5A_0D3F_3151_3511_EAC5_DB5A_0D3F_3521_EAC5_DB5A_0D3F_3151_EAC5_DB5A_0D3F_2143_EAC5_DB5A_EAC5_DB5A_0D3F_3151_EAC5_DB5A_0D3F_3151_3151_0D3F_3151_3151_DB5A_0D3F_3151_3151_0D3F_3151_3151_DB5A_0D3F
        key ^= 0x
        key <<=  1
        key += 4324354
        key >>= 1
    key = abs(key)
    encrypted_bytes = key.to_bytes((key.bit_length() + 7) // 8, byteorder='big')
    return encrypted_bytes

def encode_password(password):
    a = b''
    x_list = [110, -34, -230]
    for i in range(len(password)):
        b = password[i]//11 + 11
        c = password[i] % 11
        d = b+c
        e = b*c
        r = []
        for i in range(3):
            x = x_list[i]
            y = x**2 - d*x + e
            assert y > 0 and y < 65536 and y not in r
            r.append(y)
        for i in range(3):
            a += bytes.fromhex(f"{r[i]//256:02x}")
            a += bytes.fromhex(f"{r[i]%256:02x}")
    return a
